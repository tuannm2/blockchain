package com.chainverse.sdk.blockchain;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class MarketServiceV1 extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_CREATE_AUCTION_TYPE_HASH = "CREATE_AUCTION_TYPE_HASH";

    public static final String FUNC_DEFAULT_ADMIN_ROLE = "DEFAULT_ADMIN_ROLE";

    public static final String FUNC_DOMAIN_TYPE_HASH = "DOMAIN_TYPE_HASH";

    public static final String FUNC_END_AUCTION_TYPE_HASH = "END_AUCTION_TYPE_HASH";

    public static final String FUNC_LIST_TYPE_HASH = "LIST_TYPE_HASH";

    public static final String FUNC_OPERATION_ROLE = "OPERATION_ROLE";

    public static final String FUNC_OWNER_ROLE = "OWNER_ROLE";

    public static final String FUNC_UN_LIST_TYPE_HASH = "UN_LIST_TYPE_HASH";

    public static final String FUNC_BID = "bid";

    public static final String FUNC_BUY = "buy";

    public static final String FUNC_CREATEAUCTION = "createAuction";

    public static final String FUNC_CREATEAUCTIONBYSIG = "createAuctionBySig";

    public static final String FUNC_CVWITHDRAWPROFIT = "cvWithdrawProfit";

    public static final String FUNC_DOMAINSEPARATOR = "domainSeparator";

    public static final String FUNC_ENDAUCTION = "endAuction";

    public static final String FUNC_ENDAUCTIONBYSIG = "endAuctionBySig";

    public static final String FUNC_FORCEENDLISTING = "forceEndListing";

    public static final String FUNC_FORCERETURNERC20 = "forceReturnERC20";

    public static final String FUNC_FORCERETURNERC721 = "forceReturnERC721";

    public static final String FUNC_FORCERETURNNATIVE = "forceReturnNative";

    public static final String FUNC_GETAUCTION = "getAuction";

    public static final String FUNC_GETAUCTIONBYNFT = "getAuctionByNFT";

    public static final String FUNC_GETBIDDING = "getBidding";

    public static final String FUNC_GETBYNFT = "getByNFT";

    public static final String FUNC_GETCURRENTBID = "getCurrentBid";

    public static final String FUNC_GETLISTING = "getListing";

    public static final String FUNC_GETLISTINGBYNFT = "getListingByNFT";

    public static final String FUNC_GETPROFIT = "getProfit";

    public static final String FUNC_GETROLEADMIN = "getRoleAdmin";

    public static final String FUNC_GRANTROLE = "grantRole";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_LIST = "list";

    public static final String FUNC_LISTBYSIG = "listBySig";

    public static final String FUNC_LISTEXISTS = "listExists";

    public static final String FUNC_NAME = "name";

    public static final String FUNC_NFTS = "nfts";

    public static final String FUNC_NONCES = "nonces";

    public static final String FUNC_PROFIT = "profit";

    public static final String FUNC_RENOUNCEROLE = "renounceRole";

    public static final String FUNC_REVOKEROLE = "revokeRole";

    public static final String FUNC_SETCHAINVERSETEAM = "setChainVerseTeam";

    public static final String FUNC_SETCURRENCY = "setCurrency";

    public static final String FUNC_SETNFT = "setNFT";

    public static final String FUNC_SUPPORTSINTERFACE = "supportsInterface";

    public static final String FUNC_UNLIST = "unList";

    public static final String FUNC_UNLISTBYSIG = "unListBySig";

    public static final String FUNC_UPDATEPRICE = "updatePrice";

    public static final String FUNC_WITHDRAW = "withdraw";

    public static final String FUNC_WITHDRAWPROFIT = "withdrawProfit";

    public static final Event ADDNFT_EVENT = new Event("AddNFT", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event BID_EVENT = new Event("Bid", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event CURRENCY_EVENT = new Event("Currency", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event ENDAUCTION_EVENT = new Event("EndAuction", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event FORCERETURN_EVENT = new Event("ForceReturn", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
    ;

    public static final Event LISTED_EVENT = new Event("Listed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event ROLEADMINCHANGED_EVENT = new Event("RoleAdminChanged", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event ROLEGRANTED_EVENT = new Event("RoleGranted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event ROLEREVOKED_EVENT = new Event("RoleRevoked", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event SETCHAINVERSETEAM_EVENT = new Event("SetChainVerseTeam", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event SETCOMMUNITYTEAM_EVENT = new Event("SetCommunityTeam", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event SETNFT_EVENT = new Event("SetNFT", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<NFT>() {}));
    ;

    public static final Event SETPERCENTPROFIT_EVENT = new Event("SetPercentProfit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event SOLD_EVENT = new Event("Sold", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event UNLISTED_EVENT = new Event("Unlisted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
    ;

    public static final Event UPDATEPRICE_EVENT = new Event("UpdatePrice", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAW_EVENT = new Event("Withdraw", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event WITHDRAWPROFIT_EVENT = new Event("WithdrawProfit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
    ;

    @Deprecated
    protected MarketServiceV1(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected MarketServiceV1(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected MarketServiceV1(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected MarketServiceV1(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<AddNFTEventResponse> getAddNFTEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ADDNFT_EVENT, transactionReceipt);
        ArrayList<AddNFTEventResponse> responses = new ArrayList<AddNFTEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            AddNFTEventResponse typedResponse = new AddNFTEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nft = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<AddNFTEventResponse> addNFTEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, AddNFTEventResponse>() {
            @Override
            public AddNFTEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ADDNFT_EVENT, log);
                AddNFTEventResponse typedResponse = new AddNFTEventResponse();
                typedResponse.log = log;
                typedResponse.nft = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<AddNFTEventResponse> addNFTEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ADDNFT_EVENT));
        return addNFTEventFlowable(filter);
    }

    public List<BidEventResponse> getBidEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BID_EVENT, transactionReceipt);
        ArrayList<BidEventResponse> responses = new ArrayList<BidEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BidEventResponse typedResponse = new BidEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.auctionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.bidder = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BidEventResponse> bidEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BidEventResponse>() {
            @Override
            public BidEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BID_EVENT, log);
                BidEventResponse typedResponse = new BidEventResponse();
                typedResponse.log = log;
                typedResponse.auctionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.bidder = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<BidEventResponse> bidEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BID_EVENT));
        return bidEventFlowable(filter);
    }

    public List<CurrencyEventResponse> getCurrencyEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CURRENCY_EVENT, transactionReceipt);
        ArrayList<CurrencyEventResponse> responses = new ArrayList<CurrencyEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CurrencyEventResponse typedResponse = new CurrencyEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.currency = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CurrencyEventResponse> currencyEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CurrencyEventResponse>() {
            @Override
            public CurrencyEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CURRENCY_EVENT, log);
                CurrencyEventResponse typedResponse = new CurrencyEventResponse();
                typedResponse.log = log;
                typedResponse.currency = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.status = (Boolean) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<CurrencyEventResponse> currencyEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CURRENCY_EVENT));
        return currencyEventFlowable(filter);
    }

    public List<EndAuctionEventResponse> getEndAuctionEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ENDAUCTION_EVENT, transactionReceipt);
        ArrayList<EndAuctionEventResponse> responses = new ArrayList<EndAuctionEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            EndAuctionEventResponse typedResponse = new EndAuctionEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.auctionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<EndAuctionEventResponse> endAuctionEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, EndAuctionEventResponse>() {
            @Override
            public EndAuctionEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ENDAUCTION_EVENT, log);
                EndAuctionEventResponse typedResponse = new EndAuctionEventResponse();
                typedResponse.log = log;
                typedResponse.auctionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<EndAuctionEventResponse> endAuctionEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ENDAUCTION_EVENT));
        return endAuctionEventFlowable(filter);
    }

    public List<ForceReturnEventResponse> getForceReturnEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FORCERETURN_EVENT, transactionReceipt);
        ArrayList<ForceReturnEventResponse> responses = new ArrayList<ForceReturnEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ForceReturnEventResponse typedResponse = new ForceReturnEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.force = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ForceReturnEventResponse> forceReturnEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ForceReturnEventResponse>() {
            @Override
            public ForceReturnEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(FORCERETURN_EVENT, log);
                ForceReturnEventResponse typedResponse = new ForceReturnEventResponse();
                typedResponse.log = log;
                typedResponse.force = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ForceReturnEventResponse> forceReturnEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(FORCERETURN_EVENT));
        return forceReturnEventFlowable(filter);
    }

    public List<ListedEventResponse> getListedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LISTED_EVENT, transactionReceipt);
        ArrayList<ListedEventResponse> responses = new ArrayList<ListedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ListedEventResponse typedResponse = new ListedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.listingId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.nft = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.auction = (Boolean) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ListedEventResponse> listedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ListedEventResponse>() {
            @Override
            public ListedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LISTED_EVENT, log);
                ListedEventResponse typedResponse = new ListedEventResponse();
                typedResponse.log = log;
                typedResponse.listingId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.nft = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.auction = (Boolean) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<ListedEventResponse> listedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LISTED_EVENT));
        return listedEventFlowable(filter);
    }

    public List<RoleAdminChangedEventResponse> getRoleAdminChangedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, transactionReceipt);
        ArrayList<RoleAdminChangedEventResponse> responses = new ArrayList<RoleAdminChangedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleAdminChangedEventResponse>() {
            @Override
            public RoleAdminChangedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADMINCHANGED_EVENT, log);
                RoleAdminChangedEventResponse typedResponse = new RoleAdminChangedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.previousAdminRole = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.newAdminRole = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAdminChangedEventResponse> roleAdminChangedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADMINCHANGED_EVENT));
        return roleAdminChangedEventFlowable(filter);
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEGRANTED_EVENT, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEGRANTED_EVENT, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleGrantedEventResponse> roleGrantedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEGRANTED_EVENT));
        return roleGrantedEventFlowable(filter);
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREVOKED_EVENT, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREVOKED_EVENT, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse.log = log;
                typedResponse.role = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.account = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRevokedEventResponse> roleRevokedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREVOKED_EVENT));
        return roleRevokedEventFlowable(filter);
    }

    public List<SetChainVerseTeamEventResponse> getSetChainVerseTeamEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETCHAINVERSETEAM_EVENT, transactionReceipt);
        ArrayList<SetChainVerseTeamEventResponse> responses = new ArrayList<SetChainVerseTeamEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetChainVerseTeamEventResponse typedResponse = new SetChainVerseTeamEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.chainverseTeam = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetChainVerseTeamEventResponse> setChainVerseTeamEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetChainVerseTeamEventResponse>() {
            @Override
            public SetChainVerseTeamEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETCHAINVERSETEAM_EVENT, log);
                SetChainVerseTeamEventResponse typedResponse = new SetChainVerseTeamEventResponse();
                typedResponse.log = log;
                typedResponse.chainverseTeam = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetChainVerseTeamEventResponse> setChainVerseTeamEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETCHAINVERSETEAM_EVENT));
        return setChainVerseTeamEventFlowable(filter);
    }

    public List<SetCommunityTeamEventResponse> getSetCommunityTeamEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETCOMMUNITYTEAM_EVENT, transactionReceipt);
        ArrayList<SetCommunityTeamEventResponse> responses = new ArrayList<SetCommunityTeamEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetCommunityTeamEventResponse typedResponse = new SetCommunityTeamEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.communityTeam = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetCommunityTeamEventResponse> setCommunityTeamEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetCommunityTeamEventResponse>() {
            @Override
            public SetCommunityTeamEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETCOMMUNITYTEAM_EVENT, log);
                SetCommunityTeamEventResponse typedResponse = new SetCommunityTeamEventResponse();
                typedResponse.log = log;
                typedResponse.communityTeam = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetCommunityTeamEventResponse> setCommunityTeamEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETCOMMUNITYTEAM_EVENT));
        return setCommunityTeamEventFlowable(filter);
    }

    public List<SetNFTEventResponse> getSetNFTEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETNFT_EVENT, transactionReceipt);
        ArrayList<SetNFTEventResponse> responses = new ArrayList<SetNFTEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetNFTEventResponse typedResponse = new SetNFTEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nft = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.listingFee = (NFT) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetNFTEventResponse> setNFTEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetNFTEventResponse>() {
            @Override
            public SetNFTEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETNFT_EVENT, log);
                SetNFTEventResponse typedResponse = new SetNFTEventResponse();
                typedResponse.log = log;
                typedResponse.nft = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.listingFee = (NFT) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<SetNFTEventResponse> setNFTEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETNFT_EVENT));
        return setNFTEventFlowable(filter);
    }

    public List<SetPercentProfitEventResponse> getSetPercentProfitEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETPERCENTPROFIT_EVENT, transactionReceipt);
        ArrayList<SetPercentProfitEventResponse> responses = new ArrayList<SetPercentProfitEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetPercentProfitEventResponse typedResponse = new SetPercentProfitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.percentChainVerseTeam = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SetPercentProfitEventResponse> setPercentProfitEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SetPercentProfitEventResponse>() {
            @Override
            public SetPercentProfitEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SETPERCENTPROFIT_EVENT, log);
                SetPercentProfitEventResponse typedResponse = new SetPercentProfitEventResponse();
                typedResponse.log = log;
                typedResponse.percentChainVerseTeam = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SetPercentProfitEventResponse> setPercentProfitEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SETPERCENTPROFIT_EVENT));
        return setPercentProfitEventFlowable(filter);
    }

    public List<SoldEventResponse> getSoldEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SOLD_EVENT, transactionReceipt);
        ArrayList<SoldEventResponse> responses = new ArrayList<SoldEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SoldEventResponse typedResponse = new SoldEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.listingId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.nft = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.auction = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SoldEventResponse> soldEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SoldEventResponse>() {
            @Override
            public SoldEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SOLD_EVENT, log);
                SoldEventResponse typedResponse = new SoldEventResponse();
                typedResponse.log = log;
                typedResponse.listingId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.nft = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.buyer = (String) eventValues.getNonIndexedValues().get(3).getValue();
                typedResponse.auction = (Boolean) eventValues.getNonIndexedValues().get(4).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SoldEventResponse> soldEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SOLD_EVENT));
        return soldEventFlowable(filter);
    }

    public List<UnlistedEventResponse> getUnlistedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UNLISTED_EVENT, transactionReceipt);
        ArrayList<UnlistedEventResponse> responses = new ArrayList<UnlistedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UnlistedEventResponse typedResponse = new UnlistedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.listingId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UnlistedEventResponse> unlistedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UnlistedEventResponse>() {
            @Override
            public UnlistedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UNLISTED_EVENT, log);
                UnlistedEventResponse typedResponse = new UnlistedEventResponse();
                typedResponse.log = log;
                typedResponse.listingId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UnlistedEventResponse> unlistedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UNLISTED_EVENT));
        return unlistedEventFlowable(filter);
    }

    public List<UpdatePriceEventResponse> getUpdatePriceEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEPRICE_EVENT, transactionReceipt);
        ArrayList<UpdatePriceEventResponse> responses = new ArrayList<UpdatePriceEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdatePriceEventResponse typedResponse = new UpdatePriceEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.listingId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UpdatePriceEventResponse> updatePriceEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UpdatePriceEventResponse>() {
            @Override
            public UpdatePriceEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPDATEPRICE_EVENT, log);
                UpdatePriceEventResponse typedResponse = new UpdatePriceEventResponse();
                typedResponse.log = log;
                typedResponse.listingId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.price = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<UpdatePriceEventResponse> updatePriceEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPDATEPRICE_EVENT));
        return updatePriceEventFlowable(filter);
    }

    public List<WithdrawEventResponse> getWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAW_EVENT, transactionReceipt);
        ArrayList<WithdrawEventResponse> responses = new ArrayList<WithdrawEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawEventResponse typedResponse = new WithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.auctionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.bidder = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.currency = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.bid = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawEventResponse> withdrawEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawEventResponse>() {
            @Override
            public WithdrawEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAW_EVENT, log);
                WithdrawEventResponse typedResponse = new WithdrawEventResponse();
                typedResponse.log = log;
                typedResponse.auctionId = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.bidder = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.currency = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.bid = (BigInteger) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawEventResponse> withdrawEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAW_EVENT));
        return withdrawEventFlowable(filter);
    }

    public List<WithdrawProfitEventResponse> getWithdrawProfitEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAWPROFIT_EVENT, transactionReceipt);
        ArrayList<WithdrawProfitEventResponse> responses = new ArrayList<WithdrawProfitEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawProfitEventResponse typedResponse = new WithdrawProfitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.nft = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.currency = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawProfitEventResponse> withdrawProfitEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawProfitEventResponse>() {
            @Override
            public WithdrawProfitEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAWPROFIT_EVENT, log);
                WithdrawProfitEventResponse typedResponse = new WithdrawProfitEventResponse();
                typedResponse.log = log;
                typedResponse.nft = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.currency = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse.receiver = (String) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawProfitEventResponse> withdrawProfitEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAWPROFIT_EVENT));
        return withdrawProfitEventFlowable(filter);
    }

    public RemoteFunctionCall<byte[]> CREATE_AUCTION_TYPE_HASH() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CREATE_AUCTION_TYPE_HASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> DEFAULT_ADMIN_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEFAULT_ADMIN_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> DOMAIN_TYPE_HASH() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DOMAIN_TYPE_HASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> END_AUCTION_TYPE_HASH() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_END_AUCTION_TYPE_HASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> LIST_TYPE_HASH() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LIST_TYPE_HASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> OPERATION_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OPERATION_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> OWNER_ROLE() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER_ROLE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<byte[]> UN_LIST_TYPE_HASH() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_UN_LIST_TYPE_HASH, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> bid(BigInteger auctionId, BigInteger bidPrice) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(auctionId), 
                new org.web3j.abi.datatypes.generated.Uint256(bidPrice)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> buy(BigInteger listingId, BigInteger price) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_BUY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(listingId), 
                new org.web3j.abi.datatypes.generated.Uint256(price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createAuction(String nft, BigInteger tokenId, BigInteger initValue, String currency, BigInteger duration) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEAUCTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nft), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.generated.Uint256(initValue), 
                new org.web3j.abi.datatypes.Address(160, currency), 
                new org.web3j.abi.datatypes.generated.Uint256(duration)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> createAuctionBySig(String nft, BigInteger tokenId, BigInteger initValue, String currency, BigInteger duration, BigInteger nonce, BigInteger expiry, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CREATEAUCTIONBYSIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nft), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.generated.Uint256(initValue), 
                new org.web3j.abi.datatypes.Address(160, currency), 
                new org.web3j.abi.datatypes.generated.Uint256(duration), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.Uint256(expiry), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> cvWithdrawProfit(String nft, String currency) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CVWITHDRAWPROFIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nft), 
                new org.web3j.abi.datatypes.Address(160, currency)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<byte[]> domainSeparator() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DOMAINSEPARATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> endAuction(BigInteger auctionId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ENDAUCTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(auctionId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> endAuctionBySig(BigInteger auctionId, BigInteger nonce, BigInteger expiry, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ENDAUCTIONBYSIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(auctionId), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.Uint256(expiry), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> forceEndListing() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FORCEENDLISTING, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> forceReturnERC20(String token, BigInteger amount, String sendTo) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FORCERETURNERC20, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token), 
                new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.Address(160, sendTo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> forceReturnERC721(String token, String sendTo, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FORCERETURNERC721, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, token), 
                new org.web3j.abi.datatypes.Address(160, sendTo), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> forceReturnNative(BigInteger amount, String sendTo) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FORCERETURNNATIVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(amount), 
                new org.web3j.abi.datatypes.Address(160, sendTo)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Auction> getAuction(BigInteger auctionId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAUCTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(auctionId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Auction>() {}));
        return executeRemoteCallSingleValueReturn(function, Auction.class);
    }

    public RemoteFunctionCall<Auction> getAuctionByNFT(String nft, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETAUCTIONBYNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nft), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Auction>() {}));
        return executeRemoteCallSingleValueReturn(function, Auction.class);
    }

    public RemoteFunctionCall<Tuple2<List<BigInteger>, List<BigInteger>>> getBidding(String buyer) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBIDDING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, buyer)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<Tuple2<List<BigInteger>, List<BigInteger>>>(function,
                new Callable<Tuple2<List<BigInteger>, List<BigInteger>>>() {
                    @Override
                    public Tuple2<List<BigInteger>, List<BigInteger>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<List<BigInteger>, List<BigInteger>>(
                                convertToNative((List<Uint256>) results.get(0).getValue()), 
                                convertToNative((List<Uint256>) results.get(1).getValue()));
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<Auction, Listing>> getByNFT(String nft, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETBYNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nft), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Auction>() {}, new TypeReference<Listing>() {}));
        return new RemoteFunctionCall<Tuple2<Auction, Listing>>(function,
                new Callable<Tuple2<Auction, Listing>>() {
                    @Override
                    public Tuple2<Auction, Listing> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Auction, Listing>(
                                (Auction) results.get(0),
                                (Listing) results.get(1));
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getCurrentBid(BigInteger auctionId, String bidder) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCURRENTBID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(auctionId), 
                new org.web3j.abi.datatypes.Address(160, bidder)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Listing> getListing(BigInteger listingId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTING, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(listingId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Listing>() {}));
        return executeRemoteCallSingleValueReturn(function, Listing.class);
    }

    public RemoteFunctionCall<Listing> getListingByNFT(String nft, BigInteger tokenId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETLISTINGBYNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nft), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Listing>() {}));
        return executeRemoteCallSingleValueReturn(function, Listing.class);
    }

    public RemoteFunctionCall<BigInteger> getProfit(String nft, String currency) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETPROFIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nft), 
                new org.web3j.abi.datatypes.Address(160, currency)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<byte[]> getRoleAdmin(byte[] role) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETROLEADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteFunctionCall<TransactionReceipt> grantRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_GRANTROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> hasRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_HASROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> initialize() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> list(String nft, BigInteger tokenId, BigInteger price, String currency) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nft), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.generated.Uint256(price), 
                new org.web3j.abi.datatypes.Address(160, currency)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> listBySig(String nft, BigInteger tokenId, BigInteger price, String currency, BigInteger nonce, BigInteger expiry, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LISTBYSIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nft), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.generated.Uint256(price), 
                new org.web3j.abi.datatypes.Address(160, currency), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.Uint256(expiry), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> listExists(String nft, BigInteger tokenId, String currency, BigInteger price, String fundReceiver) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_LISTEXISTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nft), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.Address(160, currency), 
                new org.web3j.abi.datatypes.generated.Uint256(price), 
                new org.web3j.abi.datatypes.Address(160, fundReceiver)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> name() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NAME, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple5<Boolean, BigInteger, BigInteger, String, BigInteger>> nfts(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NFTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<Boolean, BigInteger, BigInteger, String, BigInteger>>(function,
                new Callable<Tuple5<Boolean, BigInteger, BigInteger, String, BigInteger>>() {
                    @Override
                    public Tuple5<Boolean, BigInteger, BigInteger, String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<Boolean, BigInteger, BigInteger, String, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> nonces(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NONCES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>> profit(String param0, String param1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PROFIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0), 
                new org.web3j.abi.datatypes.Address(160, param1)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple3<BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<BigInteger, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<BigInteger, BigInteger, BigInteger>(
                                (BigInteger) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> renounceRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> revokeRole(byte[] role, String account) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REVOKEROLE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(role), 
                new org.web3j.abi.datatypes.Address(160, account)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setChainVerseTeam(String chainVerseTeam) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETCHAINVERSETEAM, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, chainVerseTeam)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setCurrency(String currency, Boolean state) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETCURRENCY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, currency), 
                new org.web3j.abi.datatypes.Bool(state)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setNFT(String nft, NFT nftSetting) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_SETNFT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nft), 
                nftSetting), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> supportsInterface(byte[] interfaceId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUPPORTSINTERFACE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> unList(BigInteger listingId) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNLIST, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(listingId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> unListBySig(BigInteger listingId, BigInteger nonce, BigInteger expiry, BigInteger v, byte[] r, byte[] s) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UNLISTBYSIG, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(listingId), 
                new org.web3j.abi.datatypes.generated.Uint256(nonce), 
                new org.web3j.abi.datatypes.generated.Uint256(expiry), 
                new org.web3j.abi.datatypes.generated.Uint8(v), 
                new org.web3j.abi.datatypes.generated.Bytes32(r), 
                new org.web3j.abi.datatypes.generated.Bytes32(s)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updatePrice(BigInteger listingId, BigInteger price) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEPRICE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(listingId), 
                new org.web3j.abi.datatypes.generated.Uint256(price)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdraw(BigInteger auctionId, String bidder) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(auctionId), 
                new org.web3j.abi.datatypes.Address(160, bidder)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> withdrawProfit(String nft, String currency) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_WITHDRAWPROFIT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, nft), 
                new org.web3j.abi.datatypes.Address(160, currency)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static MarketServiceV1 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new MarketServiceV1(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static MarketServiceV1 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new MarketServiceV1(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static MarketServiceV1 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new MarketServiceV1(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static MarketServiceV1 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new MarketServiceV1(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<MarketServiceV1> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MarketServiceV1.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MarketServiceV1> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MarketServiceV1.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<MarketServiceV1> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(MarketServiceV1.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<MarketServiceV1> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(MarketServiceV1.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class NFT extends StaticStruct {
        public Boolean isSupport;

        public BigInteger listingFee;

        public BigInteger auctionFee;

        public String nftTeam;

        public BigInteger percentNFTTeam;

        public NFT(Boolean isSupport, BigInteger listingFee, BigInteger auctionFee, String nftTeam, BigInteger percentNFTTeam) {
            super(new org.web3j.abi.datatypes.Bool(isSupport),new org.web3j.abi.datatypes.generated.Uint256(listingFee),new org.web3j.abi.datatypes.generated.Uint256(auctionFee),new org.web3j.abi.datatypes.Address(nftTeam),new org.web3j.abi.datatypes.generated.Uint256(percentNFTTeam));
            this.isSupport = isSupport;
            this.listingFee = listingFee;
            this.auctionFee = auctionFee;
            this.nftTeam = nftTeam;
            this.percentNFTTeam = percentNFTTeam;
        }

        public NFT(Bool isSupport, Uint256 listingFee, Uint256 auctionFee, Address nftTeam, Uint256 percentNFTTeam) {
            super(isSupport,listingFee,auctionFee,nftTeam,percentNFTTeam);
            this.isSupport = isSupport.getValue();
            this.listingFee = listingFee.getValue();
            this.auctionFee = auctionFee.getValue();
            this.nftTeam = nftTeam.getValue();
            this.percentNFTTeam = percentNFTTeam.getValue();
        }
    }

    public static class Auction extends StaticStruct {
        public Boolean isEnded;

        public String nft;

        public String winner;

        public String owner;

        public String currency;

        public BigInteger tokenId;

        public BigInteger fee;

        public BigInteger bid;

        public BigInteger bidDuration;

        public BigInteger end;

        public BigInteger id;

        public Auction(Boolean isEnded, String nft, String winner, String owner, String currency, BigInteger tokenId, BigInteger fee, BigInteger bid, BigInteger bidDuration, BigInteger end, BigInteger id) {
            super(new org.web3j.abi.datatypes.Bool(isEnded),new org.web3j.abi.datatypes.Address(nft),new org.web3j.abi.datatypes.Address(winner),new org.web3j.abi.datatypes.Address(owner),new org.web3j.abi.datatypes.Address(currency),new org.web3j.abi.datatypes.generated.Uint256(tokenId),new org.web3j.abi.datatypes.generated.Uint256(fee),new org.web3j.abi.datatypes.generated.Uint256(bid),new org.web3j.abi.datatypes.generated.Uint256(bidDuration),new org.web3j.abi.datatypes.generated.Uint256(end),new org.web3j.abi.datatypes.generated.Uint256(id));
            this.isEnded = isEnded;
            this.nft = nft;
            this.winner = winner;
            this.owner = owner;
            this.currency = currency;
            this.tokenId = tokenId;
            this.fee = fee;
            this.bid = bid;
            this.bidDuration = bidDuration;
            this.end = end;
            this.id = id;
        }

        public Auction(Bool isEnded, Address nft, Address winner, Address owner, Address currency, Uint256 tokenId, Uint256 fee, Uint256 bid, Uint256 bidDuration, Uint256 end, Uint256 id) {
            super(isEnded,nft,winner,owner,currency,tokenId,fee,bid,bidDuration,end,id);
            this.isEnded = isEnded.getValue();
            this.nft = nft.getValue();
            this.winner = winner.getValue();
            this.owner = owner.getValue();
            this.currency = currency.getValue();
            this.tokenId = tokenId.getValue();
            this.fee = fee.getValue();
            this.bid = bid.getValue();
            this.bidDuration = bidDuration.getValue();
            this.end = end.getValue();
            this.id = id.getValue();
        }
    }

    public static class Listing extends StaticStruct {
        public Boolean isEnded;

        public String nft;

        public String currency;

        public String owner;

        public BigInteger tokenId;

        public BigInteger fee;

        public BigInteger price;

        public BigInteger id;

        public Listing(Boolean isEnded, String nft, String currency, String owner, BigInteger tokenId, BigInteger fee, BigInteger price, BigInteger id) {
            super(new org.web3j.abi.datatypes.Bool(isEnded),new org.web3j.abi.datatypes.Address(nft),new org.web3j.abi.datatypes.Address(currency),new org.web3j.abi.datatypes.Address(owner),new org.web3j.abi.datatypes.generated.Uint256(tokenId),new org.web3j.abi.datatypes.generated.Uint256(fee),new org.web3j.abi.datatypes.generated.Uint256(price),new org.web3j.abi.datatypes.generated.Uint256(id));
            this.isEnded = isEnded;
            this.nft = nft;
            this.currency = currency;
            this.owner = owner;
            this.tokenId = tokenId;
            this.fee = fee;
            this.price = price;
            this.id = id;
        }

        public Listing(Bool isEnded, Address nft, Address currency, Address owner, Uint256 tokenId, Uint256 fee, Uint256 price, Uint256 id) {
            super(isEnded,nft,currency,owner,tokenId,fee,price,id);
            this.isEnded = isEnded.getValue();
            this.nft = nft.getValue();
            this.currency = currency.getValue();
            this.owner = owner.getValue();
            this.tokenId = tokenId.getValue();
            this.fee = fee.getValue();
            this.price = price.getValue();
            this.id = id.getValue();
        }
    }

    public static class AddNFTEventResponse extends BaseEventResponse {
        public String nft;

        public Boolean status;
    }

    public static class BidEventResponse extends BaseEventResponse {
        public BigInteger auctionId;

        public String bidder;

        public BigInteger amount;
    }

    public static class CurrencyEventResponse extends BaseEventResponse {
        public String currency;

        public Boolean status;
    }

    public static class EndAuctionEventResponse extends BaseEventResponse {
        public BigInteger auctionId;
    }

    public static class ForceReturnEventResponse extends BaseEventResponse {
        public Boolean force;
    }

    public static class ListedEventResponse extends BaseEventResponse {
        public BigInteger listingId;

        public String nft;

        public BigInteger tokenId;

        public Boolean auction;
    }

    public static class RoleAdminChangedEventResponse extends BaseEventResponse {
        public byte[] role;

        public byte[] previousAdminRole;

        public byte[] newAdminRole;
    }

    public static class RoleGrantedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class RoleRevokedEventResponse extends BaseEventResponse {
        public byte[] role;

        public String account;

        public String sender;
    }

    public static class SetChainVerseTeamEventResponse extends BaseEventResponse {
        public String chainverseTeam;
    }

    public static class SetCommunityTeamEventResponse extends BaseEventResponse {
        public String communityTeam;
    }

    public static class SetNFTEventResponse extends BaseEventResponse {
        public String nft;

        public NFT listingFee;
    }

    public static class SetPercentProfitEventResponse extends BaseEventResponse {
        public BigInteger percentChainVerseTeam;
    }

    public static class SoldEventResponse extends BaseEventResponse {
        public BigInteger listingId;

        public String nft;

        public BigInteger tokenId;

        public String buyer;

        public Boolean auction;
    }

    public static class UnlistedEventResponse extends BaseEventResponse {
        public BigInteger listingId;
    }

    public static class UpdatePriceEventResponse extends BaseEventResponse {
        public BigInteger listingId;

        public BigInteger price;
    }

    public static class WithdrawEventResponse extends BaseEventResponse {
        public BigInteger auctionId;

        public String bidder;

        public String currency;

        public BigInteger bid;
    }

    public static class WithdrawProfitEventResponse extends BaseEventResponse {
        public String nft;

        public String currency;

        public BigInteger amount;

        public String receiver;
    }
}
